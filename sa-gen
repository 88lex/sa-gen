#!/bin/bash -v

# Display gcloud sdk organization and active admin project and enable admin APIs
function check_prereqs() {
  gcloud organizations list
  ADMIN_PROJECT=`gcloud config get-value project`
  gcloud services enable --project "$ADMIN_PROJECT" drive.googleapis.com sheets.googleapis.com \
    cloudidentity.googleapis.com admin.googleapis.com cloudresourcemanager.googleapis.com servicemanagement.googleapis.com
  read -p "Check the org and project. If wrong or blank then rerun gcloud init. Continue? y/n  " yn
  if [[ $yn =~ ^[Nn]$ ]];then exit;fi 
}

function create_projects() {
  for i in $(seq -f "%03g" "$FIRST_PROJECT_NUM" "$LAST_PROJECT_NUM"); do
    PROJECT_NAME="$PREFIX-$i"
    PROJECT_ID="$PROJECT_NAME-$SUFFIX"
    gcloud projects create "$PROJECT_ID" --name="$PROJECT_NAME"
    gcloud services enable --project "$PROJECT_ID" drive.googleapis.com sheets.googleapis.com
  done
}

function create_group() {
  ORG_ID=$(gcloud organizations list --format="value(ID)")
  gcloud identity groups create "$GROUP_EMAIL" --description="$GROUP_NAME" --organization="$ORG_ID"
}

function create_service_accounts() {
  JSON_COUNT=$((FJSON-1))
  mkdir -p "$KEYS_DIR/all/"
  for i in $(seq -f "%03g" "$FIRST_PROJECT_NUM" "$LAST_PROJECT_NUM"); do
    PROJECT_NAME="$PREFIX-$i"
    PROJECT_ID="$PROJECT_NAME-$SUFFIX"
    for j in $(seq -f "%03g" 1 "$SAS_PER_PROJECT"); do
      SA_NAME="$PREFIX-$i-$j"
      EMAIL="$SA_NAME@$PROJECT_ID.iam.gserviceaccount.com"
      gcloud iam service-accounts create "$SA_NAME" --project="$PROJECT_ID"  --display-name="$SA_NAME"
      gcloud identity groups memberships add --group-email="$GROUP_EMAIL" --member-email="$EMAIL"
      gcloud iam service-accounts keys create "$KEYS_DIR/$PROJECT_NAME/$((++JSON_COUNT)).json" --iam-account="$SA_NAME@$PROJECT_ID.iam.gserviceaccount.com" --project="$PROJECT_ID"
    done
    cp "$KEYS_DIR/$PROJECT_NAME/"*.json "$KEYS_DIR/all/"
  done
}

function main() {
  check_prereqs
  source sa-gen.conf
  create_projects
  create_group
  create_service_accounts
}

main
